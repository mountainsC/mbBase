package com.cloud.core.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cloud.core.ebus.EBusDataItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rx_ebus_data_list".
*/
public class EBusDataItemDao extends AbstractDao<EBusDataItem, String> {

    public static final String TABLENAME = "rx_ebus_data_list";

    /**
     * Properties of entity EBusDataItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, String.class, "key", true, "key");
        public final static Property ClassName = new Property(1, String.class, "className", false, "className");
        public final static Property ReceiveKey = new Property(2, String.class, "receiveKey", false, "receiveKey");
        public final static Property ThreadMode = new Property(3, String.class, "threadMode", false, "THREAD_MODE");
        public final static Property ClassType = new Property(4, String.class, "classType", false, "CLASS_TYPE");
    }


    public EBusDataItemDao(DaoConfig config) {
        super(config);
    }
    
    public EBusDataItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rx_ebus_data_list\" (" + //
                "\"key\" TEXT PRIMARY KEY NOT NULL ," + // 0: key
                "\"className\" TEXT," + // 1: className
                "\"receiveKey\" TEXT," + // 2: receiveKey
                "\"THREAD_MODE\" TEXT," + // 3: threadMode
                "\"CLASS_TYPE\" TEXT);"); // 4: classType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_rx_ebus_data_list_key ON \"rx_ebus_data_list\"" +
                " (\"key\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rx_ebus_data_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EBusDataItem entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(2, className);
        }
 
        String receiveKey = entity.getReceiveKey();
        if (receiveKey != null) {
            stmt.bindString(3, receiveKey);
        }
 
        String threadMode = entity.getThreadMode();
        if (threadMode != null) {
            stmt.bindString(4, threadMode);
        }
 
        String classType = entity.getClassType();
        if (classType != null) {
            stmt.bindString(5, classType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EBusDataItem entity) {
        stmt.clearBindings();
 
        String key = entity.getKey();
        if (key != null) {
            stmt.bindString(1, key);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(2, className);
        }
 
        String receiveKey = entity.getReceiveKey();
        if (receiveKey != null) {
            stmt.bindString(3, receiveKey);
        }
 
        String threadMode = entity.getThreadMode();
        if (threadMode != null) {
            stmt.bindString(4, threadMode);
        }
 
        String classType = entity.getClassType();
        if (classType != null) {
            stmt.bindString(5, classType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EBusDataItem readEntity(Cursor cursor, int offset) {
        EBusDataItem entity = new EBusDataItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // className
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiveKey
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // threadMode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // classType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EBusDataItem entity, int offset) {
        entity.setKey(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setClassName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiveKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setThreadMode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EBusDataItem entity, long rowId) {
        return entity.getKey();
    }
    
    @Override
    public String getKey(EBusDataItem entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EBusDataItem entity) {
        return entity.getKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
