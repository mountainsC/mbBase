package com.cloud.core.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cloud.core.configs.scheme.SchemeCacheItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "scheme_cache_list".
*/
public class SchemeCacheItemDao extends AbstractDao<SchemeCacheItem, String> {

    public static final String TABLENAME = "scheme_cache_list";

    /**
     * Properties of entity SchemeCacheItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SchemePath = new Property(0, String.class, "schemePath", true, "schemePath");
        public final static Property SchemeUrl = new Property(1, String.class, "schemeUrl", false, "schemeUrl");
        public final static Property SchemeJson = new Property(2, String.class, "schemeJson", false, "schemeJson");
        public final static Property SchemeVersion = new Property(3, int.class, "schemeVersion", false, "schemeVersion");
        public final static Property IsNeedCheckUpdate = new Property(4, boolean.class, "isNeedCheckUpdate", false, "isNeedCheckUpdate");
        public final static Property CacheTime = new Property(5, long.class, "cacheTime", false, "cacheTime");
    }


    public SchemeCacheItemDao(DaoConfig config) {
        super(config);
    }
    
    public SchemeCacheItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"scheme_cache_list\" (" + //
                "\"schemePath\" TEXT PRIMARY KEY NOT NULL ," + // 0: schemePath
                "\"schemeUrl\" TEXT," + // 1: schemeUrl
                "\"schemeJson\" TEXT," + // 2: schemeJson
                "\"schemeVersion\" INTEGER NOT NULL ," + // 3: schemeVersion
                "\"isNeedCheckUpdate\" INTEGER NOT NULL ," + // 4: isNeedCheckUpdate
                "\"cacheTime\" INTEGER NOT NULL );"); // 5: cacheTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_scheme_cache_list_schemePath ON \"scheme_cache_list\"" +
                " (\"schemePath\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"scheme_cache_list\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SchemeCacheItem entity) {
        stmt.clearBindings();
 
        String schemePath = entity.getSchemePath();
        if (schemePath != null) {
            stmt.bindString(1, schemePath);
        }
 
        String schemeUrl = entity.getSchemeUrl();
        if (schemeUrl != null) {
            stmt.bindString(2, schemeUrl);
        }
 
        String schemeJson = entity.getSchemeJson();
        if (schemeJson != null) {
            stmt.bindString(3, schemeJson);
        }
        stmt.bindLong(4, entity.getSchemeVersion());
        stmt.bindLong(5, entity.getIsNeedCheckUpdate() ? 1L: 0L);
        stmt.bindLong(6, entity.getCacheTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SchemeCacheItem entity) {
        stmt.clearBindings();
 
        String schemePath = entity.getSchemePath();
        if (schemePath != null) {
            stmt.bindString(1, schemePath);
        }
 
        String schemeUrl = entity.getSchemeUrl();
        if (schemeUrl != null) {
            stmt.bindString(2, schemeUrl);
        }
 
        String schemeJson = entity.getSchemeJson();
        if (schemeJson != null) {
            stmt.bindString(3, schemeJson);
        }
        stmt.bindLong(4, entity.getSchemeVersion());
        stmt.bindLong(5, entity.getIsNeedCheckUpdate() ? 1L: 0L);
        stmt.bindLong(6, entity.getCacheTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SchemeCacheItem readEntity(Cursor cursor, int offset) {
        SchemeCacheItem entity = new SchemeCacheItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // schemePath
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // schemeUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // schemeJson
            cursor.getInt(offset + 3), // schemeVersion
            cursor.getShort(offset + 4) != 0, // isNeedCheckUpdate
            cursor.getLong(offset + 5) // cacheTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SchemeCacheItem entity, int offset) {
        entity.setSchemePath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSchemeUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSchemeJson(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSchemeVersion(cursor.getInt(offset + 3));
        entity.setIsNeedCheckUpdate(cursor.getShort(offset + 4) != 0);
        entity.setCacheTime(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SchemeCacheItem entity, long rowId) {
        return entity.getSchemePath();
    }
    
    @Override
    public String getKey(SchemeCacheItem entity) {
        if(entity != null) {
            return entity.getSchemePath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SchemeCacheItem entity) {
        return entity.getSchemePath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
