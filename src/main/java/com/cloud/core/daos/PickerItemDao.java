package com.cloud.core.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cloud.core.picker.PickerItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_address".
*/
public class PickerItemDao extends AbstractDao<PickerItem, Integer> {

    public static final String TABLENAME = "tb_address";

    /**
     * Properties of entity PickerItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "id");
        public final static Property ParentId = new Property(1, int.class, "parentId", false, "parentId");
        public final static Property Name = new Property(2, String.class, "name", false, "name");
    }


    public PickerItemDao(DaoConfig config) {
        super(config);
    }
    
    public PickerItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_address\" (" + //
                "\"id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"parentId\" INTEGER NOT NULL ," + // 1: parentId
                "\"name\" TEXT);"); // 2: name
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_tb_address_name ON \"tb_address\"" +
                " (\"name\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_address\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PickerItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getParentId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PickerItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getParentId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public PickerItem readEntity(Cursor cursor, int offset) {
        PickerItem entity = new PickerItem( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // parentId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PickerItem entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setParentId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(PickerItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(PickerItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PickerItem entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
